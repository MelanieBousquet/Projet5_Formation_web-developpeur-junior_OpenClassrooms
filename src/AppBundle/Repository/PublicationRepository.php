<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PublicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends \Doctrine\ORM\EntityRepository
{
    public function findEventPublications($page, $nbPerPage = 10)
    {
        $query = $this->createQueryBuilder('p')
            ->andWhere('p.event IS NOT NULL')
        ;

        $query
            // Define the first publication of the list
            ->setFirstResult(($page-1) * $nbPerPage)
            // And the max number of publications to show 
            ->setMaxResults($nbPerPage)
        ;

        // return Paginator object
        return new Paginator($query, true);
    }
    
    public function findDefaultPublications($page, $nbPerPage = 10)
    {
        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.animalState', 'pas')
            ->andWhere('pas.id IS NULL')
            ->andWhere('p.event IS NULL')
            
        ;

        $query
            // Define the first publication of the list
            ->setFirstResult(($page-1) * $nbPerPage)
            // And the max number of publications to show 
            ->setMaxResults($nbPerPage)
        ;

        // return Paginator object
        return new Paginator($query, true);
    }
    public function findPublicationsFoundOrLost($state) 
    {
        $qb = $this->createQueryBuilder('p');
        
        $qb 
            ->innerJoin('p.animalState', 'ls')
            ->addSelect('ls')
            ->innerJoin('ls.state', 'st')
            ->addSelect('st')
            ->andWhere('st.type = :state')
            ->setParameter('state', $state)        
        ;
        
        return $qb
            ->getQuery()
            ->getResult()
        ;    
    }
    
    public function findPublicationsOnAnimalsToAdopt($animalType, $sex, $breed, $age)
    {
        $qb = $this->createQueryBuilder('p');
        
        $qb 
            ->andWhere('p.published = :boolean')
            ->setParameter('boolean', true)
            ->innerJoin('p.animalState', 'ls')
            ->addSelect('ls')
            ->innerJoin('ls.state', 'st')
            ->addSelect('st')
            ->andWhere('st.type = :secondType OR st.type = :thirdType')
            ->setParameter('secondType', 'adoptable')
            ->setParameter('thirdType', 'rÃ©servÃ©') 
            ->innerJoin('ls.animal', 'a')
            ->addSelect('a')
        ;

        $this->whichSex($qb, $sex);
        $this->whichBreedAndType($qb, $breed, $animalType);
        $this->whichAge($qb, $age);
        
        return $qb
            ->getQuery()
            ->getResult()
        ;    
    }
    
    public function whichSex(QueryBuilder $qb, $sex)
    {
        if ($sex !== 'all'){
            $qb
                ->innerJoin('a.sex', 's')
                ->addSelect('s')
                ->andWhere('s.type = :sex')
                ->setParameter('sex', $sex)
            ;
        } 
    }      
    
    public function whichBreedAndType(QueryBuilder $qb, $breed, $animalType)
    {
        $qb
            ->innerJoin('a.breed', 'b')
            ->addSelect('b')
            ->innerJoin('b.type', 't')
            ->andWhere('t.name = :name')
            ->setParameter('name', $animalType)
        ;
        
        if ($breed !== 'all'){
            $qb
                ->andWhere('b.name = :breed')
                ->setParameter('breed', $breed)
            ;
        } 
    } 
    
    public function whichAge(QueryBuilder $qb, $age)
    {
        $date = new \DateTime('- 1 year');
        
        switch ($age) {
            case 'adult' :
                $qb
                    ->andWhere('a.birthday <= :date')
                    ->setParameter('date', $date)
                ;
                break;
            case 'chiot' : 
            case 'chaton' :
                $qb
                    ->andWhere('a.birthday >= :date')
                    ->setParameter('date', $date)
                ;
                break;
        }  
        
    }
}
