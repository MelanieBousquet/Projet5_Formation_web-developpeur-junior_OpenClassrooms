<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * AnimalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnimalRepository extends \Doctrine\ORM\EntityRepository
{
    public function whichTypeOfAnimal(QueryBuilder $qb, $animalType)
    {
        $qb
            ->innerJoin('a.breed', 'b')
            ->addSelect('b')
            ->innerJoin('b.type', 't')
            ->andWhere('t.name = :name')
            ->setParameter('name', $animalType)
        ;
    }

    public function animalsToAdoptList($animalType)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->innerJoin('a.animalStates','ls')
            ->addSelect('ls')
            ->innerJoin('ls.state', 's')
            ->addSelect('s')
            ->andWhere('s.type = :type')
            ->setParameter('type', 'adoptable')
            ->andWhere('s.type != :otherType')
            ->setParameter('otherType', 'adopté')
        ;

        $this->whichTypeOfAnimal($qb, $animalType);

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    public function animalsAlmostAdoptedList($animalType)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->innerJoin('a.animalStates','ls')
            ->addSelect('ls')
            ->innerJoin('ls.state', 's')
            ->addSelect('s')
            ->andWhere('s.type = :type')
            ->setParameter('type', 'réservé')
            ->andWhere('s.type != :otherType')
            ->setParameter('otherType', 'adopté')
        ;

        $this->whichTypeOfAnimal($qb, $animalType);

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    public function animalsNotToAdoptList($animalType, $state)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->innerJoin('a.animalStates','ls')
            ->addSelect('ls')
            ->innerJoin('ls.state', 's')
            ->addSelect('s')
            ->andWhere('s.type = :type')
            ->setParameter('type', $state)
        ;

        $this->whichTypeOfAnimal($qb, $animalType);

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }
    
    public function getAnimalsAlone() 
    {
        $qb = $this->createQueryBuilder('a');
        
        $qb
            ->andWhere('a.user is NULL')
            ->innerJoin('a.animalStates', 'ls')
            ->addSelect('ls')
            ->innerJoin('ls.state', 's')
            ->addSelect('s')
            ->andWhere('s.type != :type')
            ->setParameter('type', 'adopté')
            ->andWhere('s.type != :otherType')
            ->setParameter('otherType', 'perdu')
        ;
        
        return $qb
            ->getQuery()
            ->getResult()
        ;
    }
}
